
#
# config.mk
# @configure_input@
#
# Field G. Van Zee
#
# Variable definitions needed by the top-level Makefile.
# 


# Only include this block of code once
ifndef CONFIG_MK_INCLUDED
CONFIG_MK_INCLUDED := yes
SHELL := /usr/bin/env bash


#
# --- Build definitions -------------------------------------------------------
#

SO_MAJOR  := @so_version_major@
SO_MINORB := @so_version_minorbuild@
SO_MMB    := $(SO_MAJOR).$(SO_MINORB)

# This variable will identify the machine architecture (ie: x86_64, ia64, etc.)
# It will be used to construct a string that is appended to the libflame
# library name.
ARCH                           := @fla_host_cpu@

# This variable identifies the operating system / kernel. It is the result of
# 'uname -s'.
OS_NAME                        := @os_name@

# We have to set these particular variables because some of the @anchors@
# that are substituted in via configure may be defined *in terms of* these
# variables. For example, @libdir@ may be replaced with '${exec_prefix}/lib',
# and if we don't define exec_prefix, libdir will end up with '/lib', which
# is definitely not what we want.
prefix                         := @prefix@
exec_prefix                    := @exec_prefix@
libdir                         := @libdir@
includedir                     := @includedir@

# The library and header installation directories tell us where to install
# the libraries and headers, respectively. Notice that we support the use of
# DESTDIR so that advanced users may install to a temporary location.
INSTALL_LIBDIR                 := $(DESTDIR)$(libdir)
INSTALL_INCDIR                 := $(DESTDIR)$(includedir)

# The directory path to the top level of the source distribution. When
# building in-tree, this path is ".". When building out-of-tree, this path
# is path used to identify the location of configure.
DIST_PATH                      := @dist_path@

#$(info INSTALL_LIBDIR = $(INSTALL_LIBDIR))
#$(info INSTALL_INCDIR = $(INSTALL_INCDIR))
#$(error .)

# Variables corresponding to other configure-time options.
FLA_ENABLE_VERBOSE_MAKE_OUTPUT := @fla_enable_verbose_make_output@
FLA_ENABLE_STATIC_BUILD        := @fla_enable_static_build@
FLA_ENABLE_DYNAMIC_BUILD       := @fla_enable_dynamic_build@
FLA_ENABLE_MAX_ARG_LIST_HACK   := @fla_enable_max_arg_list_hack@
FLA_ENABLE_BUILTIN_BLAS        := @fla_enable_builtin_blas@
FLA_ENABLE_LAPACK2FLAME        := @fla_enable_lapack2flame@
FLA_MULTITHREADING_MODEL       := @fla_multithreading_model@

# Alias the variable 'V' to the flag for verbosity.
ifeq ($(V),1)
FLA_ENABLE_VERBOSE_MAKE_OUTPUT := yes
endif



#
# --- Utility program definitions ---------------------------------------------
#

SH         := /usr/bin/env bash
MV         := mv
CP         := cp
CAT        := cat
MKDIR      := mkdir -p
RM         := rm
RM_F       := rm -f
RM_RF      := rm -rf
SYMLINK    := ln -sf
FIND       := @FIND@
TOUCH      := touch
XARGS      := xargs
CTAGS      := ctags
ETAGS      := etags
RANLIB     := @RANLIB@
INSTALL    := @INSTALL@
MAIL       := mail
EMPTY_FILE := /dev/null




#
# --- Development tools definitions -------------------------------------------
#

# --- Determine the C compiler and related flags ---
CC           := @CC@
CC_VENDOR    := @CC_VENDOR@
CPPROCFLAGS  := -D_POSIX_C_SOURCE=200809L @DEFS@ @fla_blis_flags@
CMISCFLAGS   := @fla_c_lang_flags@ @fla_c_openmp_flags@ @fla_c_prof_flags@
CDBGFLAGS    := @fla_c_debug_flags@
CWARNFLAGS   := @fla_c_warning_flags@
COPTFLAGS    := @fla_c_opt_flags@
CVECFLAGS    := @fla_c_sse_flags@

# Add position-independent code flag if building a dynamic library.
ifeq ($(FLA_ENABLE_DYNAMIC_BUILD),yes)
CMISCFLAGS   += -fPIC
endif

# Add explicit C99 support.
#CMISCFLAGS   += -std=c99

# Aggregate all of the flags into two groups: one for optimizable code, and
# one for code that should not be optimized.
CFLAGS       := $(strip $(CDBGFLAGS) $(COPTFLAGS) $(CVECFLAGS) $(CWARNFLAGS) $(CMISCFLAGS) $(CPPROCFLAGS))
CFLAGS_NOOPT := $(strip $(CDBGFLAGS) $(CWARNFLAGS) $(CMISCFLAGS) $(CPPROCFLAGS))

ifeq (@fla_enable_hip@, yes)
CFLAGS       := -D__HIP_PLATFORM_AMD__=1 -I/opt/rocm/include $(CFLAGS)
CFLAGS_NOOPT := -D__HIP_PLATFORM_AMD__=1 -I/opt/rocm/include $(CFLAGS_NOOPT)
endif

# If the user provided his own CFLAGS, allow them to override our own.
# *** Notice that wo do not also modify the 'no optimization' set of flags.
#     We do this to avoid potential numerical disruption of routines such
#     as slamch/dlamch.
ifneq (@fla_userdef_cflags@,)
CFLAGS       := @CFLAGS@ $(CFLAGS)
endif


# --- Determine the C preprocessor ---
CPP          := cpp
CPPFLAGS     := @DEFS@


# --- Determine the archiver and related flags ---
AR               := @AR@
ARFLAGS          := cr
#AR_ARG_LIST_FILE := ar_arg_list
AR_OBJ_LIST_FILE := ar_obj_list


# --- Determine the python interpreter ---

PYTHON       := @PYTHON@


# --- Determine the linker and related flags ---
LINKER       := $(CC)
ifeq (@fla_multithreading_model@, pthreads)
LDFLAGS      := @fla_c_prof_flags@ @LDFLAGS@ @FLIBS@ -lpthread
else
ifeq (@fla_multithreading_model@, openmp)
LDFLAGS      := @fla_c_prof_flags@ @LDFLAGS@ @FLIBS@ @fla_c_openmp_flags@
else
LDFLAGS      := @fla_c_prof_flags@ @LDFLAGS@ @FLIBS@
endif
endif
ifeq (@fla_enable_hip@, yes)
LDFLAGS      := -L/opt/rocm/lib -lrocblas -lamdhip64 $(LDFLAGS)
endif


# end of ifndef CONFIG_MK_INCLUDED conditional block
endif
